# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
        # specify the version
        - image: ubuntu:16.04

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: ~/go/src/github.com/komuw/meli
    steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Install Docker client
            command: |
                set -x
                VER="17.03.0-ce"
                apt-get -y update
                apt-get -y install curl wget git python
                curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
                tar -xz -C /tmp -f /tmp/docker-$VER.tgz
                mv /tmp/docker/* /usr/bin
        - run:
            name: install golang
            command: |
                wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz
                tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz
                export PATH=$PATH:/usr/local/go/bin
                echo "export PATH=$PATH:/usr/local/go/bin" >> /etc/profile
                mkdir -p ~/go/bin
                echo "export PATH=$PATH:~/go/bin" >> /etc/profile
                echo "export LC_ALL=C.UTF-8" >> /etc/profile
                echo "export LANG=C.UTF-8" >> /etc/profile
                source /etc/profile
        - run: source /etc/profile && go get -u github.com/golang/dep/cmd/dep
        - run: source /etc/profile && go get -u github.com/goreleaser/goreleaser
        - run: source /etc/profile && dep ensure; dep prune
        - run: source /etc/profile && go build --race -o meli main.go
        - run: ./meli -up -d -f testdata/docker-compose.yml
        - run:
            name: echo number of running containers (expected=11), actual;
            command: docker ps -q | wc -l
        # stop the containers running from the previous command
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run: cp meli testdata/ && cd testdata/ && ./meli -up -d
        - run:
            name: echo number of running containers (expected=11), actual;
            command: docker ps -q | wc -l
        - run:
            name: run tests
            command: source /etc/profile && go test -timeout 1m -race -cover -v ./...
        - run:
            name: run benchmarks
            command: source /etc/profile && go test -timeout 1m -race -run=XXXX -bench=. ./...

        # benchmark against docker-compose
        - run: apt -y install python-pip
        - run: pip install -U pip && pip install -U docker-compose
        - run: rm meli
        - run: source /etc/profile && go build -o meli main.go
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: show docker-compose version
            command: docker-compose version
        - run:
            name: time docker-compose up
            command: time docker-compose -f testdata/docker-compose.yml up -d
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: time meli -up
            command: time ./meli -up -d -f testdata/docker-compose.yml

  deploy:
     steps:
        - run:
            name: do a github release on master
            command: |
                echo "todo: deploy with goreleaser"
                source /etc/profile
                apt-get -y update
                apt-get -y install software-properties-common
                apt-get -y install ruby ruby-dev rubygems build-essential snapd snapcraft rpm rpm-common
                gem install --no-ri --no-rdoc fpm
                git checkout . && git clean -fd
                docker login -u $DOCKER_USER -p $DOCKER_PASS
                goreleaser --rm-dist -config .goreleaser.yml --skip-validate
            filters:
                tags:
                    only: /v[0-9]+(\.[0-9]+)*/

