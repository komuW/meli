# Golang CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-go/ for more details
# tags DOCS: https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
version: 2
jobs:
  build:
    docker:
        - image: ubuntu:16.04
    working_directory: ~/stuff/notgopath/meli
    steps:
        - checkout
        # the docker version specified here should be same as the docker version of the client you install.
        - setup_remote_docker:
            version: 18.06.1-ce
        - run:
            name: install apt and pip deps
            command: |
                pwd; ls -lsha
                apt-get -y update
                apt -y install \
                            curl \
                            wget \
                            git \
                            python \
                            python-pip \
                            software-properties-common \
                            build-essential \
                            snapd \
                            snapcraft \
                            nano \
                            apt-transport-https \
                            ca-certificates
                # pip install -U pip # see; https://github.com/pypa/pip/issues/5221
                pip install -U docker-compose

        - run:
            name: install golang
            command: |
                VER="go1.11"
                wget --directory-prefix=/usr/local https://dl.google.com/go/$VER.linux-amd64.tar.gz
                tar -C /usr/local -xzf /usr/local/$VER.linux-amd64.tar.gz
                export PATH=$PATH:/usr/local/go/bin
                echo "export PATH=$PATH:/usr/local/go/bin" >> /etc/profile
                mkdir -p ~/go/bin
                echo "export PATH=$PATH:~/go/bin" >> /etc/profile
                echo "export LC_ALL=C.UTF-8" >> /etc/profile
                echo "export LANG=C.UTF-8" >> /etc/profile
                echo "export GO111MODULE=on" >> /etc/profile
                source /etc/profile
        - run:
            name: Install Docker client
            command: |
                set -x
                DOCKER_VER="18.06.1-ce"
                curl -L -o /tmp/docker-$DOCKER_VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VER.tgz
                tar -xz -C /tmp -f /tmp/docker-$DOCKER_VER.tgz
                mv /tmp/docker/* /usr/bin
                docker version
        - run: source /etc/profile && go build --race -o meli cli/cli.go
        - run: ./meli -v
        - run: ./meli -up -d -f testdata/docker-compose.yml
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                num_containers=$(docker ps -q | wc -l)
                echo "number of containers are; $num_containers"
                if [ "$num_containers" != "12" ]; then
                    echo "wanted 12 containers, got $num_containers" && exit 500
                fi
        - run:
            name: check that docker linking works
            command: |
                docker exec -it backup ping -w3 redis
                docker exec -it backup ping -w3 eminem.com
        - run:
            name: check that docker .env file works
            command: |
                CHECK_ENV_VAR=$(docker exec -it buildservice printenv | grep NAME_IN_ENV_FILE)
                echo "env var from .env file is; $CHECK_ENV_VAR"
                if [[ $CHECK_ENV_VAR != *"Mutabaruka"* ]]; then
                    echo "wanted env var NAME_IN_ENV_FILE=Mutabaruka, got $CHECK_ENV_VAR"
                fi
        # remove the containers running from the previous command
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run: cp meli testdata/ && cd testdata/ && ./meli -up -d
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                num_containers=$(docker ps -q | wc -l)
                echo "number of containers are; $num_containers"
                if [ "$num_containers" != "12" ]; then
                    echo "wanted 12 containers, got $num_containers" && exit 500
                fi
        - run:
            name: check that docker linking works
            command: |
                docker exec -it backup ping -w3 redis
                docker exec -it backup ping -w3 eminem.com
        - run:
            name: check that docker .env file works
            command: |
                CHECK_ENV_VAR=$(docker exec -it buildservice printenv | grep NAME_IN_ENV_FILE)
                echo "env var from .env file is; $CHECK_ENV_VAR"
                if [[ $CHECK_ENV_VAR != *"Mutabaruka"* ]]; then
                    echo "wanted env var NAME_IN_ENV_FILE=Mutabaruka, got $CHECK_ENV_VAR"
                fi
        # test rebuild, stop (BUT DO NOT remove) containers from previous command
        # BUT because of this error; https://circleci.com/docs/1.0/docker-btrfs-error/
        # we cant do that on circleCI(though it works locally).
        # so until circleCI fixes(or we run circleCI in a vm instead of a container), we need to destroy
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run: ./meli -up -d -f testdata/docker-compose.yml -build
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                all_containers=$(docker ps -aq | wc -l)
                running_containers=$(docker ps -q | wc -l)
                echo "number of all containers; $all_containers"
                echo "number of running containers are; $running_containers"
                if [ "$running_containers" != "12" ]; then
                    echo "wanted 12 containers, got $running_containers" && exit 500
                fi
        - run:
             name: go vet
             command: source /etc/profile && go vet -v -all -shadow ./...
        - run:
            name: run tests
            command: source /etc/profile && go test -timeout 1m -race -cover -v ./...
        - run:
            name: run benchmarks
            command: source /etc/profile && go test -timeout 1m -race -run=XXXX -bench=. ./...
        - run:
            name: codecov
            command: |
                source /etc/profile && \
                go test -timeout 1m -v -race -cover -coverprofile=coverage.txt ./... && \
                bash <(curl -s https://codecov.io/bash)

        # benchmark against docker-compose
        - run: rm meli
        - run: source /etc/profile && go build -o meli cli/cli.go
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: show docker-compose version
            command: docker-compose version
        - run:
            name: time docker-compose up
            command: time docker-compose -f testdata/docker-compose.yml up -d
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: time meli -up
            command: time ./meli -up -d -f testdata/docker-compose.yml
        - run:
            name: check if changes have release notes 
            command: |
                if [ "$CIRCLE_BRANCH" == "master" ]; then
                    printf "\n $CIRCLE_BRANCH branch, ignoring check for relese notes \n"
                else
                    ChangedFiles=`git diff --name-only origin/master`
                    case "$ChangedFiles" in
                        *RELEASE_NOTES.*)
                            printf "\n Thanks, your commits include update to release notes. \n";;
                        *)
                            printf "\n You should add release notes to .github/RELEASE_NOTES.md \n" && exit 77;;
                    esac
                fi

  deploy:
    docker:
        - image: ubuntu:16.04
    working_directory: ~/stuff/notgopath/meli
    steps:
        - checkout
        - run:
            name: install apt and pip deps
            command: |
                apt-get -y update
                apt -y install \
                            curl \
                            wget \
                            git \
                            python \
                            python-pip \
                            software-properties-common \
                            build-essential \
                            snapd \
                            snapcraft \
                            nano
        - run:
            name: install golang
            command: |
                VER="go1.11"
                wget --directory-prefix=/usr/local https://dl.google.com/go/$VER.linux-amd64.tar.gz
                tar -C /usr/local -xzf /usr/local/$VER.linux-amd64.tar.gz
                export PATH=$PATH:/usr/local/go/bin
                echo "export PATH=$PATH:/usr/local/go/bin" >> /etc/profile
                mkdir -p ~/go/bin
                echo "export PATH=$PATH:~/go/bin" >> /etc/profile
                echo "export LC_ALL=C.UTF-8" >> /etc/profile
                echo "export LANG=C.UTF-8" >> /etc/profile
                echo "export GO111MODULE=on" >> /etc/profile
                source /etc/profile

        - run:
            name: go releaser
            command: |
                wget --directory-prefix=/usr/local https://github.com/goreleaser/goreleaser/releases/download/v0.86.1/goreleaser_Linux_x86_64.tar.gz
                tar -C /usr/local -xzf /usr/local/goreleaser_Linux_x86_64.tar.gz
        - run:
            name: do a new release
            command: |
                LAST_GIT_MESSAGE=$(git log -n1 --format=oneline --pretty=%B)
                echo "last git commit message on master:"
                echo $LAST_GIT_MESSAGE
                if [ "$LAST_GIT_MESSAGE" == 'do release' ]; then
                    echo "deploying with goreleaser"
                    source /etc/profile
                    /usr/local/goreleaser --rm-dist --config=.goreleaser.yml --debug --skip-validate --release-notes=.github/RELEASE_NOTES.md
                fi

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
